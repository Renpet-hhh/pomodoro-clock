{"version":3,"sources":["components/TimerSettingsOptions.js","components/Space.js","workers/Worker.js","utils/WebWorker.js","components/Timer.js","components/TimerController.js","components/PomodoroClock.js","App.js","serviceWorker.js","index.js"],"names":["TimerSettingsOptions","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","incrementValue","state","value","freezeValue","onChange","setState","decrementValue","resetValue","defaultValue","callback","react_default","a","createElement","className","id","partialId","label","onClick","Component","Space","style","marginTop","marginRight","marginLeft","marginBottom","workers_Worker","getTimer","timer","shouldStop","isFirstRun","count","interval","currentTime","initialTime","Date","now","fn","Math","floor","setTimeout","run","postMessage","onmessage","e","data","previous","stop","Array","isArray","length","WebWorker","worker","code","toString","substring","indexOf","lastIndexOf","blob","Blob","type","Worker","URL","createObjectURL","Timer","convertTimeInSecondsToString","timeInSeconds","minutes","seconds","resetTimer","time","currentTimeInSeconds","pauseTimer","resumeTimer","speedUp","defaultTime","audioRef","React","createRef","onFinish","Number","isFinite","console","log","document","getElementById","innerText","_this2","mode","ref","callbackAudio","src","components_TimerController","icon","PomodoroClock","startStopTimer","isTimerRunning","playIcon","timerCallback","reset","pause","resume","audio","setBreakTime","breakTime","setSessionTime","sessionTime","resetBreakTime","resetSessionTime","handleTimeFinish","play","TimerSettingsOptions_TimerSettingsOptions","Timer_Timer","App","startTimer","PomodoroClock_PomodoroClock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5cfc80e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport '../components-style/TimerSettingsOptions.css';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\n\r\n\r\n// callback is called with reset function as an argument\r\n// onChange property will be called with current value as an argument\r\n// freezeValue property, when true, prevents value changing\r\nexport default class TimerSettingsOptions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: this.props.defaultValue };\r\n        this.props.callback(this.resetValue);\r\n    }\r\n\r\n    incrementValue = () => {\r\n        if (this.state.value >= 60 || this.props.freezeValue) return;\r\n        this.props.onChange(this.state.value + 1); // let parent get updated value\r\n        this.setState({ value: this.state.value + 1 });\r\n    }\r\n\r\n    decrementValue = () => {\r\n        if (this.state.value <= 1 || this.props.freezeValue) return;\r\n        this.props.onChange(this.state.value - 1); // let parent get updated value\r\n        this.setState({ value: this.state.value - 1 });\r\n    }\r\n\r\n    resetValue = () => {\r\n        this.props.onChange(this.props.defaultValue); // let parent get updated value\r\n        this.setState({value: this.props.defaultValue});\r\n    }\r\n\r\n    render() {\r\n        return ( // partialId is necessary to complete FCC's user stories\r\n            <div className=\"TimerSettingsOptions\">\r\n                <label id={this.props.partialId + \"-label\"} className=\"timer-settings-label\">{this.props.label}</label>\r\n                <div className=\"settings-buttons-container\">\r\n                    <button onClick={this.incrementValue} id={this.props.partialId + \"-increment\"} className=\"increment-decrement-buttons\">\r\n                        <i className=\"fas fa-angle-up\"></i>\r\n                    </button>\r\n                    <label id={this.props.partialId + \"-length\"}>{this.state.value}</label>\r\n                    <button onClick={this.decrementValue} id={this.props.partialId + \"-decrement\"} className=\"increment-decrement-buttons\">\r\n                        <i className=\"fas fa-angle-down\"></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div style={{marginTop: props.marginTop, marginRight: props.marginRight,\r\n        marginLeft: props.marginLeft,  marginBottom: props.marginBottom}}></div>\r\n    );\r\n}","\r\nexport default () => {\r\n\r\n    // ------------------------\r\n    // creates a timer, with methods run and stop\r\n    const getTimer = () => {\r\n        const timer = {shouldStop: false, isFirstRun: true, count: 0, interval: null, currentTime: null};\r\n        timer.run = () => {\r\n            if (timer.shouldStop) {\r\n                return;\r\n            }\r\n            if (timer.isFirstRun) {\r\n                timer.isFirstRun = false;\r\n                timer.initialTime = Date.now()\r\n            }\r\n            timer.fn();\r\n            timer.count++;\r\n            if (Math.floor((Date.now() - timer.initialTime)/timer.interval) > timer.count) {\r\n                timer.fn();\r\n                timer.count++;\r\n            }\r\n            setTimeout(() => timer.run(), timer.interval);\r\n        }\r\n        timer.stop = () => {\r\n            timer.shouldStop = true;\r\n            return {interval: timer.interval, currentTime: timer.currentTime};\r\n        }\r\n        \r\n        const decrementTime = () => {\r\n            if (timer.currentTime === null) return;\r\n            timer.currentTime -= 100;\r\n            if (timer.currentTime % 1000 === 900) {\r\n                if (timer.currentTime === 900) {\r\n                    timer.currentTime = null; // avoids duplicate onFinish evocation\r\n                    postMessage(0);\r\n                    setTimeout(() => postMessage(\"FINISH\"), 900);\r\n                    return;\r\n                }\r\n                postMessage(Math.floor(timer.currentTime/1000));\r\n            }\r\n        }\r\n        timer.fn = decrementTime;\r\n        return timer;\r\n    }\r\n    // ------------------------\r\n\r\n    let timer = getTimer();\r\n\r\n    onmessage = (e) => {\r\n        if (e.data === \"STOP\") {\r\n            let previous = timer.stop(); // get previous data\r\n            timer = getTimer(); // new timer\r\n            timer.interval = previous.interval;\r\n            timer.currentTime = previous.currentTime;\r\n        } else if (e.data === \"RUN\") {\r\n            if (!timer.interval || !timer.currentTime) {\r\n                postMessage(\"ERROR, PROVIDE DATA\");\r\n                return;\r\n            }\r\n            timer.run();\r\n        } else if (Array.isArray(e.data) && e.data.length === 2) { // when Timer calls postMessage([interval, currentTime])\r\n            timer.interval = e.data[0];\r\n            timer.currentTime = e.data[1];\r\n        } else if (e.data === \"SPEED UP\") {\r\n            timer.interval = 10;\r\n        }\r\n        else {\r\n            postMessage(\"ERROR\");\r\n        }\r\n    };\r\n\r\n\r\n}","// from https://github.com/facebook/create-react-app/issues/1277#issuecomment-345516463\r\nexport default class WebWorker {\r\n    constructor(worker) {\r\n        let code = worker.toString();\r\n        code = code.substring(code.indexOf(\"{\") + 1, code.lastIndexOf(\"}\"));\r\n\r\n        const blob = new Blob([code], { type: \"application/javascript\" });\r\n        return new Worker(URL.createObjectURL(blob));\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport \"../components-style/Timer.css\";\r\nimport Worker from '../workers/Worker';\r\nimport WebWorker from '../utils/WebWorker';\r\n\r\n// property callback can get reset, pause and resume functions as parameters\r\n// property callbackAudio can get audio ref as the paramater\r\n// onFinish will be called when currentTimeInSeconds === 0, with no parameters\r\nexport default class Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {currentTimeInSeconds: this.props.defaultTime}; // this.props.defaultTime is only used in constructor\r\n        this.audioRef = React.createRef();\r\n        this.props.callback(this.resetTimer, this.pauseTimer, this.resumeTimer);\r\n        this.timer = new WebWorker(Worker); // works in another thread, updating currentTimeInSeconds\r\n        this.timer.postMessage([100, this.props.defaultTime*1000]);\r\n        this.timer.onmessage = e => {\r\n            if (e.data === \"FINISH\") {\r\n                this.setState({currentTimeInSeconds: 0}, () => {\r\n                    this.props.onFinish(); // calls parent's onFinish handler\r\n                });\r\n                \r\n            } else if (Number.isFinite(e.data)) {\r\n                this.setState({currentTimeInSeconds: e.data}); // worker is sending the updated currentTimeInSeconds\r\n            } else {\r\n                console.log(e.data); // catch missing messages, for now\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(document.getElementById(\"time-left\").innerText);\r\n    }\r\n\r\n    convertTimeInSecondsToString = (timeInSeconds) => {\r\n        let minutes = Math.floor(timeInSeconds/60);\r\n        let seconds = timeInSeconds % 60;\r\n        let minutesString = minutes < 10 ? \"0\" + minutes : \"\" + minutes;\r\n        let secondsString = seconds < 10 ? \"0\" + seconds : \"\" + seconds;\r\n        return minutesString + \":\" + secondsString;\r\n    }\r\n\r\n\r\n    resetTimer = (time) => { // seconds\r\n        this.timer.postMessage(\"STOP\");\r\n        this.setState({currentTimeInSeconds: time});\r\n        this.timer.postMessage([100, time*1000]); // [interval in miliseconds, currentTime in miliseconds]\r\n    }\r\n    pauseTimer = () => {\r\n        this.timer.postMessage(\"STOP\");\r\n    }\r\n    resumeTimer = () => {\r\n        this.timer.postMessage(\"RUN\");\r\n    }\r\n\r\n    speedUp = (e) => {\r\n        this.timer.postMessage(\"SPEED UP\");\r\n    }\r\n\r\n    render() { // id is necessary for FCC's tests\r\n        return (\r\n            <div className=\"Timer\">\r\n                <label id=\"timer-label\" className=\"timer-label\">{this.props.mode}</label>\r\n                <span id=\"time-left\" className=\"time-left\">{this.convertTimeInSecondsToString(\r\n                    this.state.currentTimeInSeconds)}</span>\r\n                <audio id=\"beep\" ref={(ref) => this.props.callbackAudio(ref)} src={this.props.src} type={this.props.type}></audio>\r\n                    <button onClick={this.speedUp}>Speed up</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport \"../components-style/TimerController.css\";\r\n\r\n\r\nexport default (props) => {\r\n    return (\r\n        <button onClick={props.onClick} id={props.id} className=\"TimerController\">\r\n            <i className={props.icon}></i>\r\n        </button>\r\n    );\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport TimerSettingsButton from './TimerSettingsOptions';\r\nimport Space from './Space';\r\nimport Timer from './Timer';\r\nimport TimerController from './TimerController';\r\n\r\nexport default class PomodoroClock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {isTimerRunning: false, playIcon: \"fas fa-play\",\r\n                    mode: \"Session\", sessionTime: 25, breakTime: 5}; // minutes\r\n    }\r\n\r\n    // called by TimerController button when clicked\r\n    startStopTimer = () => {\r\n        if (this.state.isTimerRunning) {\r\n            this.state.pauseTimer();\r\n            this.setState({playIcon: \"fas fa-play\"});\r\n        } else {\r\n            this.state.resumeTimer();\r\n            this.setState({playIcon: \"fas fa-pause\"});\r\n        }\r\n        this.setState({isTimerRunning: !this.state.isTimerRunning});\r\n    }\r\n\r\n    // get resetTimer, pauseTimer and resumeTimer from Timer.js\r\n    timerCallback = (reset, pause, resume) => {\r\n        this.setState({resetTimer: reset, pauseTimer: pause, \r\n            resumeTimer: resume});\r\n    }\r\n\r\n    // get audio from Timer.js\r\n    callbackAudio = (audio) => {\r\n        this.audio = audio;\r\n    }\r\n\r\n    // TimerSettingsOptions will call these functions when its value changes, with the updated value as parameter\r\n    setBreakTime = (value) => {\r\n        this.setState({breakTime: value}); // minutes\r\n        if (this.state.mode === \"Break\") this.state.resetTimer(value*60); // seconds\r\n    }\r\n    setSessionTime = (value) => {\r\n        this.setState({sessionTime: value}); // minutes\r\n        if (this.state.mode === \"Session\") this.state.resetTimer(value*60); // seconds\r\n    }\r\n\r\n    // called by TimerController button when clicked\r\n    reset = () => {\r\n        this.state.resetTimer(1500); // seconds\r\n        this.setState({isTimerRunning: false, playIcon: \"fas fa-play\", mode: \"Session\"}); // minutes\r\n        this.state.resetBreakTime();\r\n        this.state.resetSessionTime();\r\n        this.audio.pause();\r\n        this.audio.currentTime = 0;\r\n    }\r\n\r\n    // called by Timer when its internal timer worker finishes\r\n    handleTimeFinish = () => {\r\n        if (this.state.mode === \"Session\") {\r\n            this.audio.play();\r\n            this.setState({mode: \"Break\"}, () => {\r\n                this.state.resetTimer(this.state.breakTime*60); // seconds\r\n                this.state.resumeTimer();\r\n            });\r\n        } else {\r\n            this.audio.play();\r\n            this.setState({mode: \"Session\"}, () => {\r\n                this.state.resetTimer(this.state.sessionTime*60); // seconds\r\n                this.state.resumeTimer();\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"time-settings-container\">\r\n                    <TimerSettingsButton callback={(reset) => this.setState({resetBreakTime: reset})} \r\n                    onChange={this.setBreakTime} partialId=\"break\" label=\"Break Length\" defaultValue={5}\r\n                    freezeValue={this.state.isTimerRunning}></TimerSettingsButton>\r\n                    <Space marginLeft=\"3rem\"></Space>\r\n                    <TimerSettingsButton callback={(reset) => this.setState({resetSessionTime: reset})} \r\n                    onChange={this.setSessionTime} partialId=\"session\" label=\"Session Length\" defaultValue={25}\r\n                    freezeValue={this.state.isTimerRunning}></TimerSettingsButton>\r\n                </div>\r\n                <Space marginTop=\"3rem\"></Space>\r\n                <Timer callback={this.timerCallback} mode={this.state.mode}\r\n                    defaultTime={this.state.sessionTime*60} // seconds\r\n                    callbackAudio={this.callbackAudio}\r\n                    onFinish={this.handleTimeFinish} src=\"https://onlineclock.net/audio/options/default.mp3\" type=\"audio/mp3\"></Timer>\r\n                <div id=\"timer-controllers-container\">\r\n                    <TimerController onClick={this.startStopTimer} id=\"start_stop\" icon={this.state.playIcon}></TimerController>\r\n                    <TimerController onClick={this.reset} id=\"reset\" icon=\"fas fa-redo\"></TimerController>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport PomodoroClock from './components/PomodoroClock';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  startTimer = () => {\r\n\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header id=\"title\">Pomodoro Clock</header>\r\n        <PomodoroClock></PomodoroClock>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}